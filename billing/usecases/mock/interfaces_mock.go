// Code generated by MockGen. DO NOT EDIT.
// Source: billing/usecases/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=billing/usecases/interfaces.go -destination=billing/usecases/mock/interfaces_mock.go
//

// Package mock_usecases is a generated GoMock package.
package mock_usecases

import (
	context "context"
	reflect "reflect"

	domain "encore.app/billing/domain"
	usecases "encore.app/billing/usecases"
	gomock "go.uber.org/mock/gomock"
)

// MockBillingUseCase is a mock of BillingUseCase interface.
type MockBillingUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockBillingUseCaseMockRecorder
	isgomock struct{}
}

// MockBillingUseCaseMockRecorder is the mock recorder for MockBillingUseCase.
type MockBillingUseCaseMockRecorder struct {
	mock *MockBillingUseCase
}

// NewMockBillingUseCase creates a new mock instance.
func NewMockBillingUseCase(ctrl *gomock.Controller) *MockBillingUseCase {
	mock := &MockBillingUseCase{ctrl: ctrl}
	mock.recorder = &MockBillingUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBillingUseCase) EXPECT() *MockBillingUseCaseMockRecorder {
	return m.recorder
}

// AddItem mocks base method.
func (m *MockBillingUseCase) AddItem(ctx context.Context, req usecases.AddItemRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddItem", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddItem indicates an expected call of AddItem.
func (mr *MockBillingUseCaseMockRecorder) AddItem(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddItem", reflect.TypeOf((*MockBillingUseCase)(nil).AddItem), ctx, req)
}

// CloseBill mocks base method.
func (m *MockBillingUseCase) CloseBill(ctx context.Context, req usecases.CloseBillRequest) (domain.Bill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseBill", ctx, req)
	ret0, _ := ret[0].(domain.Bill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseBill indicates an expected call of CloseBill.
func (mr *MockBillingUseCaseMockRecorder) CloseBill(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseBill", reflect.TypeOf((*MockBillingUseCase)(nil).CloseBill), ctx, req)
}

// CreateBill mocks base method.
func (m *MockBillingUseCase) CreateBill(ctx context.Context, req usecases.CreateBillRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBill", ctx, req)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBill indicates an expected call of CreateBill.
func (mr *MockBillingUseCaseMockRecorder) CreateBill(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBill", reflect.TypeOf((*MockBillingUseCase)(nil).CreateBill), ctx, req)
}

// GetBill mocks base method.
func (m *MockBillingUseCase) GetBill(ctx context.Context, billingID string) (domain.Bill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBill", ctx, billingID)
	ret0, _ := ret[0].(domain.Bill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBill indicates an expected call of GetBill.
func (mr *MockBillingUseCaseMockRecorder) GetBill(ctx, billingID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBill", reflect.TypeOf((*MockBillingUseCase)(nil).GetBill), ctx, billingID)
}

// MockWorkflowClient is a mock of WorkflowClient interface.
type MockWorkflowClient struct {
	ctrl     *gomock.Controller
	recorder *MockWorkflowClientMockRecorder
	isgomock struct{}
}

// MockWorkflowClientMockRecorder is the mock recorder for MockWorkflowClient.
type MockWorkflowClientMockRecorder struct {
	mock *MockWorkflowClient
}

// NewMockWorkflowClient creates a new mock instance.
func NewMockWorkflowClient(ctrl *gomock.Controller) *MockWorkflowClient {
	mock := &MockWorkflowClient{ctrl: ctrl}
	mock.recorder = &MockWorkflowClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkflowClient) EXPECT() *MockWorkflowClientMockRecorder {
	return m.recorder
}

// IsWorkflowRunning mocks base method.
func (m *MockWorkflowClient) IsWorkflowRunning(ctx context.Context, workflowID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsWorkflowRunning", ctx, workflowID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsWorkflowRunning indicates an expected call of IsWorkflowRunning.
func (mr *MockWorkflowClientMockRecorder) IsWorkflowRunning(ctx, workflowID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsWorkflowRunning", reflect.TypeOf((*MockWorkflowClient)(nil).IsWorkflowRunning), ctx, workflowID)
}

// QueryWorkflow mocks base method.
func (m *MockWorkflowClient) QueryWorkflow(ctx context.Context, workflowID string) (domain.Bill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryWorkflow", ctx, workflowID)
	ret0, _ := ret[0].(domain.Bill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryWorkflow indicates an expected call of QueryWorkflow.
func (mr *MockWorkflowClientMockRecorder) QueryWorkflow(ctx, workflowID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryWorkflow", reflect.TypeOf((*MockWorkflowClient)(nil).QueryWorkflow), ctx, workflowID)
}

// SignalWorkflow mocks base method.
func (m *MockWorkflowClient) SignalWorkflow(ctx context.Context, workflowID, signal string, data any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignalWorkflow", ctx, workflowID, signal, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// SignalWorkflow indicates an expected call of SignalWorkflow.
func (mr *MockWorkflowClientMockRecorder) SignalWorkflow(ctx, workflowID, signal, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignalWorkflow", reflect.TypeOf((*MockWorkflowClient)(nil).SignalWorkflow), ctx, workflowID, signal, data)
}

// StartWorkflow mocks base method.
func (m *MockWorkflowClient) StartWorkflow(ctx context.Context, workflowID string, bill *domain.Bill) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartWorkflow", ctx, workflowID, bill)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartWorkflow indicates an expected call of StartWorkflow.
func (mr *MockWorkflowClientMockRecorder) StartWorkflow(ctx, workflowID, bill any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartWorkflow", reflect.TypeOf((*MockWorkflowClient)(nil).StartWorkflow), ctx, workflowID, bill)
}
