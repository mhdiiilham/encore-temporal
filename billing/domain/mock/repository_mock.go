// Code generated by MockGen. DO NOT EDIT.
// Source: billing/domain/repository.go
//
// Generated by this command:
//
//	mockgen -source=billing/domain/repository.go -destination=billing/domain/mock/repository_mock.go
//

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	context "context"
	reflect "reflect"

	domain "encore.app/billing/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CloseBilling mocks base method.
func (m *MockRepository) CloseBilling(ctx context.Context, billing domain.Bill) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseBilling", ctx, billing)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseBilling indicates an expected call of CloseBilling.
func (mr *MockRepositoryMockRecorder) CloseBilling(ctx, billing any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseBilling", reflect.TypeOf((*MockRepository)(nil).CloseBilling), ctx, billing)
}

// DeleteExchange mocks base method.
func (m *MockRepository) DeleteExchange(ctx context.Context, exchangeID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExchange", ctx, exchangeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteExchange indicates an expected call of DeleteExchange.
func (mr *MockRepositoryMockRecorder) DeleteExchange(ctx, exchangeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExchange", reflect.TypeOf((*MockRepository)(nil).DeleteExchange), ctx, exchangeID)
}

// DeleteItem mocks base method.
func (m *MockRepository) DeleteItem(ctx context.Context, itemID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteItem", ctx, itemID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteItem indicates an expected call of DeleteItem.
func (mr *MockRepositoryMockRecorder) DeleteItem(ctx, itemID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteItem", reflect.TypeOf((*MockRepository)(nil).DeleteItem), ctx, itemID)
}

// GetBill mocks base method.
func (m *MockRepository) GetBill(ctx context.Context, billingID string) (domain.Bill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBill", ctx, billingID)
	ret0, _ := ret[0].(domain.Bill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBill indicates an expected call of GetBill.
func (mr *MockRepositoryMockRecorder) GetBill(ctx, billingID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBill", reflect.TypeOf((*MockRepository)(nil).GetBill), ctx, billingID)
}

// GetExchangeByBillID mocks base method.
func (m *MockRepository) GetExchangeByBillID(ctx context.Context, billID string) (domain.BillExchange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExchangeByBillID", ctx, billID)
	ret0, _ := ret[0].(domain.BillExchange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExchangeByBillID indicates an expected call of GetExchangeByBillID.
func (mr *MockRepositoryMockRecorder) GetExchangeByBillID(ctx, billID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExchangeByBillID", reflect.TypeOf((*MockRepository)(nil).GetExchangeByBillID), ctx, billID)
}

// GetItemsByBillID mocks base method.
func (m *MockRepository) GetItemsByBillID(ctx context.Context, billID string) ([]domain.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemsByBillID", ctx, billID)
	ret0, _ := ret[0].([]domain.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemsByBillID indicates an expected call of GetItemsByBillID.
func (mr *MockRepositoryMockRecorder) GetItemsByBillID(ctx, billID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemsByBillID", reflect.TypeOf((*MockRepository)(nil).GetItemsByBillID), ctx, billID)
}

// RevertBillClosing mocks base method.
func (m *MockRepository) RevertBillClosing(ctx context.Context, billingID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevertBillClosing", ctx, billingID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevertBillClosing indicates an expected call of RevertBillClosing.
func (mr *MockRepositoryMockRecorder) RevertBillClosing(ctx, billingID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevertBillClosing", reflect.TypeOf((*MockRepository)(nil).RevertBillClosing), ctx, billingID)
}

// SaveBill mocks base method.
func (m *MockRepository) SaveBill(ctx context.Context, bill *domain.Bill) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveBill", ctx, bill)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveBill indicates an expected call of SaveBill.
func (mr *MockRepositoryMockRecorder) SaveBill(ctx, bill any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBill", reflect.TypeOf((*MockRepository)(nil).SaveBill), ctx, bill)
}

// SaveExchange mocks base method.
func (m *MockRepository) SaveExchange(ctx context.Context, bill *domain.Bill) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveExchange", ctx, bill)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveExchange indicates an expected call of SaveExchange.
func (mr *MockRepositoryMockRecorder) SaveExchange(ctx, bill any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveExchange", reflect.TypeOf((*MockRepository)(nil).SaveExchange), ctx, bill)
}

// SaveItem mocks base method.
func (m *MockRepository) SaveItem(ctx context.Context, item *domain.Item) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveItem", ctx, item)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveItem indicates an expected call of SaveItem.
func (mr *MockRepositoryMockRecorder) SaveItem(ctx, item any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveItem", reflect.TypeOf((*MockRepository)(nil).SaveItem), ctx, item)
}

// UpdateExchange mocks base method.
func (m *MockRepository) UpdateExchange(ctx context.Context, exchange *domain.BillExchange) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExchange", ctx, exchange)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateExchange indicates an expected call of UpdateExchange.
func (mr *MockRepositoryMockRecorder) UpdateExchange(ctx, exchange any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExchange", reflect.TypeOf((*MockRepository)(nil).UpdateExchange), ctx, exchange)
}

// UpdateItem mocks base method.
func (m *MockRepository) UpdateItem(ctx context.Context, item *domain.Item) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateItem", ctx, item)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateItem indicates an expected call of UpdateItem.
func (mr *MockRepositoryMockRecorder) UpdateItem(ctx, item any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItem", reflect.TypeOf((*MockRepository)(nil).UpdateItem), ctx, item)
}
