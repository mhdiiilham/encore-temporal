// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/generator/generator.go
//
// Generated by this command:
//
//	mockgen -source=pkg/generator/generator.go -destination=pkg/generator/mock/mock_generator.go
//

// Package mock_generator is a generated GoMock package.
package mock_generator

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIDProvider is a mock of IDProvider interface.
type MockIDProvider struct {
	ctrl     *gomock.Controller
	recorder *MockIDProviderMockRecorder
	isgomock struct{}
}

// MockIDProviderMockRecorder is the mock recorder for MockIDProvider.
type MockIDProviderMockRecorder struct {
	mock *MockIDProvider
}

// NewMockIDProvider creates a new mock instance.
func NewMockIDProvider(ctrl *gomock.Controller) *MockIDProvider {
	mock := &MockIDProvider{ctrl: ctrl}
	mock.recorder = &MockIDProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDProvider) EXPECT() *MockIDProviderMockRecorder {
	return m.recorder
}

// GenerateBillingID mocks base method.
func (m *MockIDProvider) GenerateBillingID(prefix string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateBillingID", prefix)
	ret0, _ := ret[0].(string)
	return ret0
}

// GenerateBillingID indicates an expected call of GenerateBillingID.
func (mr *MockIDProviderMockRecorder) GenerateBillingID(prefix any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateBillingID", reflect.TypeOf((*MockIDProvider)(nil).GenerateBillingID), prefix)
}

// GenerateIdempotencyKey mocks base method.
func (m *MockIDProvider) GenerateIdempotencyKey(prefix string, payload []byte) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateIdempotencyKey", prefix, payload)
	ret0, _ := ret[0].(string)
	return ret0
}

// GenerateIdempotencyKey indicates an expected call of GenerateIdempotencyKey.
func (mr *MockIDProviderMockRecorder) GenerateIdempotencyKey(prefix, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateIdempotencyKey", reflect.TypeOf((*MockIDProvider)(nil).GenerateIdempotencyKey), prefix, payload)
}
